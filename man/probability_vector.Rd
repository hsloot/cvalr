% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/allProbability.R, R/allExpectation.R
\docType{methods}
\name{probability_vector}
\alias{probability_vector}
\alias{probability_vector,ExMarkovParam-method}
\alias{probability_vector,ExMarkovParam}
\alias{probability_vector,ExtGaussian2FParam-method}
\alias{probability_vector,ExtGaussian2FParam}
\alias{probability_vector,FrankExtArch2FParam-method}
\alias{probability_vector,FrankExtArch2FParam}
\alias{expected_value}
\alias{expected_pcds_loss}
\alias{expected_cdo_loss}
\alias{expected_value,CalibrationParam-method}
\alias{expected_value,CalibrationParam}
\alias{expected_pcds_loss,CalibrationParam-method}
\alias{expected_pcds_loss,CalibrationParam}
\alias{expected_pcds_loss,ExtMO2FParam-method}
\alias{expected_pcds_loss,ExtGaussian2FParam-method}
\alias{expected_pcds_loss,ExtGaussian2FParam}
\alias{expected_pcds_loss,FrankExtArch2FParam-method}
\alias{expected_pcds_loss,FrankExtArch2FParam}
\alias{expected_cdo_loss,CalibrationParam-method}
\alias{expected_cdo_loss,CalibrationParam}
\alias{expected_cdo_loss,ExtGaussian2FParam-method}
\alias{expected_cdo_loss,ExtGaussian2FParam}
\title{Probability vector and expected value for calibration parameter}
\usage{
probability_vector(object, t)

\S4method{probability_vector}{ExMarkovParam}(object, t)

\S4method{probability_vector}{ExtGaussian2FParam}(object, t)

\S4method{probability_vector}{FrankExtArch2FParam}(object, t)

expected_value(object, t, g, ...)

expected_pcds_loss(object, t, recovery_rate, ...)

expected_cdo_loss(object, t, recovery_rate, lower, upper, ...)

\S4method{expected_value}{CalibrationParam}(object, t, g, ...)

\S4method{expected_pcds_loss}{CalibrationParam}(object, t, recovery_rate, ...)

\S4method{expected_pcds_loss}{ExtMO2FParam}(
  object,
  t,
  recovery_rate,
  method = c("default", "fallback"),
  ...
)

\S4method{expected_pcds_loss}{ExtGaussian2FParam}(
  object,
  t,
  recovery_rate,
  method = c("default", "fallback"),
  ...
)

\S4method{expected_pcds_loss}{FrankExtArch2FParam}(
  object,
  t,
  recovery_rate,
  method = c("default", "fallback"),
  ...
)

\S4method{expected_cdo_loss}{CalibrationParam}(object, t, recovery_rate, lower, upper, ...)

\S4method{expected_cdo_loss}{ExtGaussian2FParam}(
  object,
  t,
  recovery_rate,
  lower,
  upper,
  method = c("default", "fallback"),
  ...
)
}
\arguments{
\item{object}{The calibration parameter object}

\item{t}{Point-in-time}

\item{g}{Transformation function}

\item{...}{Further arguments}

\item{recovery_rate}{The recovery rate of the portfolio CDS/CDO}

\item{lower}{Lower attachment point of the CDO tranche}

\item{upper}{Upper attachment point of the CDO tranche}

\item{method}{Choice of method (if available)}
}
\description{
Calculates the probability vector and expected values of the average
default counting process \eqn{L}.
}
\details{
Calculates for a function \eqn{g} and the average default counting process
\eqn{L} the expectation
\deqn{
  \mathbb{E}[g(L_t)] .
}
For a portfolio CDS choose \eqn{g(x) = (1 - R) x} and for a CDO tranche with
attachment points \eqn{l < u} and choose
\eqn{g(x) = min{\{ \max{\{ (1 - R) x - l, 0 \}}, u - l \}}}, where \eqn{R} is
the recovery rate.
}
\examples{
probability_vector(CuadrasAugeExtMO2FParam(
  dim = 50, lambda = 0.05, rho = 0.4), 0.3)
probability_vector(AlphaStableExtMO2FParam(
  dim = 50, lambda = 0.05, rho = 0.4), 0.3)
probability_vector(PoissonExtMO2FParam(
  dim = 50, lambda = 0.05, rho = 0.4), 0.3)
probability_vector(ExponentialExtMO2FParam(
  dim = 50, lambda = 0.05, rho = 0.4), 0.3)

probability_vector(ExtGaussian2FParam(
  dim = 50, lambda = 0.05, rho = 0.4), 0.3)

probability_vector(FrankExtArch2FParam(
  dim = 50, lambda = 0.05, rho = 0.4), 0.3)

expected_value(CuadrasAugeExtMO2FParam(
  dim = 50, lambda = 0.05, rho = 0.4), 0.3,
  function(x) pmin(pmax(0.6 * x - 0.1, 0), 0.2))
expected_value(AlphaStableExtMO2FParam(
  dim = 50, lambda = 0.05, rho = 0.4), 0.3,
  function(x) pmin(pmax(0.6 * x - 0.1, 0), 0.2))
expected_value(PoissonExtMO2FParam(
  dim = 50, lambda = 0.05, rho = 0.4), 0.3,
  function(x) pmin(pmax(0.6 * x - 0.1, 0), 0.2))
expected_value(ExponentialExtMO2FParam(
  dim = 50, lambda = 0.05, rho = 0.4), 0.3,
  function(x) pmin(pmax(0.6 * x - 0.1, 0), 0.2))

expected_pcds_loss(CuadrasAugeExtMO2FParam(
  dim = 50, lambda = 0.05, rho = 0.4), 0.3, 0.4)
expected_pcds_loss(AlphaStableExtMO2FParam(
  dim = 50, lambda = 0.05, rho = 0.4), 0.3, 0.4)
expected_pcds_loss(PoissonExtMO2FParam(
  dim = 50, lambda = 0.05, rho = 0.4), 0.3, 0.4)
expected_pcds_loss(ExponentialExtMO2FParam(
  dim = 50, lambda = 0.05, rho = 0.4), 0.3, 0.4)

expected_pcds_loss(CuadrasAugeExtMO2FParam(dim = 75, lambda = 0.05, rho = 0.4),
  t = 0.25, recovery_rate = 0.4)
expected_pcds_loss(CuadrasAugeExtMO2FParam(dim = 75, lambda = 0.05, rho = 0.4),
  t = 0.25, recovery_rate = 0.4, method = "fallback")

expected_pcds_loss(ExtGaussian2FParam(dim = 75, lambda = 0.05, rho = 0.6),
  t = 0.25, recovery_rate = 0.4)
expected_pcds_loss(ExtGaussian2FParam(dim = 75, lambda = 0.05, rho = 0.6),
  t = 0.25, recovery_rate = 0.4, method = "fallback")

expected_pcds_loss(FrankExtArch2FParam(dim = 75, lambda = 0.05, rho = 0.6),
  t = 0.25, recovery_rate = 0.4)
expected_pcds_loss(FrankExtArch2FParam(dim = 75, lambda = 0.05, rho = 0.6),
  t = 0.25, recovery_rate = 0.4, method = "fallback")

expected_cdo_loss(CuadrasAugeExtMO2FParam(
  dim = 50, lambda = 0.05, rho = 0.4), 0.3, 0.4, 0.1, 0.2)
expected_cdo_loss(AlphaStableExtMO2FParam(
  dim = 50, lambda = 0.05, rho = 0.4), 0.3, 0.4, 0.1, 0.2)
expected_cdo_loss(PoissonExtMO2FParam(
  dim = 50, lambda = 0.05, rho = 0.4), 0.3, 0.4, 0.1, 0.2)
expected_cdo_loss(ExponentialExtMO2FParam(
  dim = 50, lambda = 0.05, rho = 0.4), 0.3, 0.4, 0.1, 0.2)

expected_cdo_loss(ExtGaussian2FParam(dim = 75, lambda = 0.05, rho = 0.6),
  t = 0.25, recovery_rate = 0.4, lower = 0.1, upper = 0.2)
expected_cdo_loss(ExtGaussian2FParam(dim = 75, lambda = 0.05, rho = 0.6),
  t = 0.25, recovery_rate = 0.4, lower = 0.1, upper = 0.2, method = "fallback")

}
