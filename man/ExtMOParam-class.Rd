% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/s4-ExtMOParam.R, R/s4-ExtMO2FParam.R
\docType{class}
\name{ExtMOParam-class}
\alias{ExtMOParam-class}
\alias{ExtMOParam}
\alias{initialize,ExtMOParam-method}
\alias{initialize,ExtMOParam,ANY-method}
\alias{show,ExtMOParam-method}
\alias{show,ExtMO2FParam-method}
\title{Extendible Marshall--Olkin calibration parameter}
\usage{
\S4method{initialize}{ExtMOParam}(.Object, dim, bf)

\S4method{show}{ExtMOParam}(object)

\S4method{show}{ExtMO2FParam}(object)
}
\arguments{
\item{.Object}{ An object:  see the \dQuote{Initialize Methods} section.}

\item{dim}{Dimension.}

\item{bf}{Bernstein function.}

\item{object}{Any R object}
}
\description{
\linkS4class{CalibrationParam}-class for the extendible Marshall-Olkin model for
the \emph{average default counting process}. Extends \linkS4class{ExtMOParam}.
}
\details{
The model is defined by the assumption that the multivariate default times
\eqn{\tau = (\tau_1, \ldots, \tau_d)} are extendible Marshall-Olkin.
The joint survival function of all portfolio items is
\deqn{
  P(\tau > t)
    = \exp{(- a_0 t_{[1]} - \cdots - a_{d-1} t_{[d]})} ,
}
for \eqn{t_{[1]} \geq \cdots \geq t_{[d]}} begin the descending version of
\eqn{t} and
\deqn{
  a_{i}
    = \sum_{l=0}^{d-i-1} \binom{d-i-1}{l} \lambda_{l+1} .
}
The parameter are implicitly defined by a +Bernstein function* \eqn{\psi}
(which is provided to the constructor):
\deqn{
  a_{i}
    = \psi{(i+1)} - \psi{(i)} .
}
}
\section{Functions}{
\itemize{
\item \code{initialize,ExtMOParam-method}: Constructor

\item \code{show,ExtMOParam-method}: Display the object.

\item \code{show,ExtMO2FParam-method}: Display the object.
}}

\section{Slots}{

\describe{
\item{\code{bf}}{The Bernstein function of the extendible Marshall-Olkin distribution
(see \link[rmo:BernsteinFunction-class]{rmo::BernsteinFunction}).}
}}

\examples{
ExtMOParam(
  dim = 2,
  bf = rmo::ScaledBernsteinFunction(
    scale = 0.05,
    original = rmo::SumOfBernsteinFunctions(
      first = rmo::ConstantBernsteinFunction(constant = 0.4),
      second = rmo::LinearBernsteinFunction(scale = 1 - 0.4))
    ))
}
