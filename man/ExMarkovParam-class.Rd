% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/allClass-S4.R, R/simulateParam-S4.R,
%   R/probabilityDistribution-S4.R
\docType{class}
\name{ExMarkovParam-class}
\alias{ExMarkovParam-class}
\alias{ExMarkovParam}
\alias{simulate_param,ExMarkovParam-method}
\alias{probability_distribution,ExMarkovParam-method}
\title{Exchangeable Markovian calibration parameter}
\usage{
\S4method{simulate_param}{ExMarkovParam}(object, times, ..., n_sim = 10000)

\S4method{probability_distribution}{ExMarkovParam}(
  object,
  times,
  ...,
  method = c("default", "ExMarkovParam", "CalibrationParam")
)
}
\arguments{
\item{object}{The calibration parameter object.}

\item{times}{Point-in-time.}

\item{...}{Pass-through parameter.}

\item{n_sim}{Number of samples.}

\item{method}{Calculation method (either \code{"default"} or the name of the
class whose implementation should be used).}
}
\description{
Calibration parameter class for the general exchangeable model with a
Markovian \emph{default counting process}.
}
\details{
The probability of \eqn{j > i} portfolio items being defaulted at time
\eqn{t > s} conditioned on \eqn{i} portfolio items being defaulted at time
\eqn{s} is

\deqn{
  \mathbb{P}(Z_t = j \mid Z_s = i)
    = \delta_{i}^\top \operatorname{e}^{(t-s) Q} \delta_{j} .
}
}
\section{Functions}{
\itemize{
\item \code{simulate_param,ExMarkovParam-method}: simulates the default counting process \eqn{L} and returns a matrix \code{x} with
\code{nrow(x) == n_sim} and \code{ncol(x) == length(times)} if \code{length(times) > 1L}
and a vector \code{x} with \code{length(x) == n_sim} otherwise.

\item \code{probability_distribution,ExMarkovParam-method}: returns the probability vector for the average default count process \eqn{L}.
}}

\section{Slots}{

\describe{
\item{\code{qmatrix}}{The \eqn{(d+1) \times (d+1)} Markov-generator matrix of the
default counting process}
}}

\examples{
ExMarkovParam(
 qmatrix = matrix(
   c(-0.07647059, 0, 0, 0.05294118, -0.05, 0, 0.02352941, 0.05, 0),
   nrow = 3, ncol = 3))

simulate_param(ExMarkovParam(), 1e1, seq(0, 5, by = 0.25))

probability_distribution(CuadrasAugeExtMO2FParam(
  dim = 50, lambda = 0.05, rho = 0.4), 0.3)
probability_distribution(AlphaStableExtMO2FParam(
  dim = 50, lambda = 0.05, rho = 0.4), 0.3)
probability_distribution(PoissonExtMO2FParam(
  dim = 50, lambda = 0.05, rho = 0.4), 0.3)
probability_distribution(ExponentialExtMO2FParam(
  dim = 50, lambda = 0.05, rho = 0.4), 0.3)

}
