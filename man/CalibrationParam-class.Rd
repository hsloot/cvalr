% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/s4-CalibrationParam.R
\docType{class}
\name{CalibrationParam-class}
\alias{CalibrationParam-class}
\alias{simulate_dt}
\alias{simulate_adcp}
\alias{simulate_adcp,CalibrationParam-method}
\alias{probability_distribution}
\alias{expected_value}
\alias{expected_value,CalibrationParam-method}
\alias{expected_pcds_loss}
\alias{expected_pcds_loss,CalibrationParam-method}
\alias{expected_cdo_loss}
\alias{expected_cdo_loss,CalibrationParam-method}
\alias{expected_pcds_equation}
\alias{expected_pcds_equation,CalibrationParam-method}
\alias{expected_cdo_equation}
\alias{expected_cdo_equation,CalibrationParam-method}
\title{Virtual super-class for calibration parameters}
\usage{
simulate_dt(object, ...)

simulate_adcp(object, times, ...)

\S4method{simulate_adcp}{CalibrationParam}(object, times, ...)

probability_distribution(object, times, ...)

expected_value(object, times, g, ...)

\S4method{expected_value}{CalibrationParam}(
  object,
  times,
  g,
  ...,
  method = c("default", "CalibrationParam"),
  pd_args = NULL
)

expected_pcds_loss(object, times, recovery_rate, ...)

\S4method{expected_pcds_loss}{CalibrationParam}(
  object,
  times,
  recovery_rate,
  ...,
  method = c("default", "CalibrationParam")
)

expected_cdo_loss(object, times, recovery_rate, lower, upper, ...)

\S4method{expected_cdo_loss}{CalibrationParam}(
  object,
  times,
  recovery_rate,
  lower,
  upper,
  ...,
  method = c("default", "CalibrationParam")
)

expected_pcds_equation(
  object,
  times,
  discount_factors,
  recovery_rate,
  coupon,
  upfront,
  ...
)

\S4method{expected_pcds_equation}{CalibrationParam}(
  object,
  times,
  discount_factors,
  recovery_rate,
  coupon,
  upfront,
  ...
)

expected_cdo_equation(
  object,
  times,
  discount_factors,
  recovery_rate,
  lower,
  upper,
  coupon,
  upfront,
  ...
)

\S4method{expected_cdo_equation}{CalibrationParam}(
  object,
  times,
  discount_factors,
  recovery_rate,
  lower,
  upper,
  coupon,
  upfront,
  ...
)
}
\arguments{
\item{object}{A \linkS4class{CalibrationParam}-object.}

\item{...}{Pass-through parameter.}

\item{times}{A non-negative numeric vector of timepoints.}

\item{g}{A payoff transformation function.}

\item{method}{Calculation method (either \code{"default"} or the name of the
class whose implementation should be used).}

\item{pd_args}{A list of parameters for \code{\link[=probability_distribution]{probability_distribution()}}.}

\item{recovery_rate}{Non-negative number between zero and one for the recovery rate of the portfolio CDS/CDO.}

\item{lower}{Non-negative number between zero and one for the lower attachment point of the CDO tranche.}

\item{upper}{Non-negative number between \code{lower} and one for the upper attachment point of the CDO tranche.}

\item{discount_factors}{Non-negative numeric vector for the discount factors for the timepoints.}

\item{coupon}{Numeric number for the running coupon of the portfolio CDS / CDO tranche.}

\item{upfront}{Numeric number for the upfront payment of the portfolio CDS / CDO tranche.}
}
\description{
\code{CalibrationParam} provides a simple interface to calculate \emph{expected values}
and \emph{pricing equations} for \emph{portfolio CDS'} and \emph{CDO's} with different
models.
}
\section{Functions}{
\itemize{
\item \code{simulate_dt}: simulates the vector of \emph{default times} and returns a matrix \code{x} with
\code{dim(x) == c(n_sim, getDimension(object))}.

\item \code{simulate_adcp}: simulates the \emph{average default counting process} and returns a
matrix \code{x} with \code{dim(x) == c(n_sim, length(times))}.

\item \code{simulate_adcp,CalibrationParam-method}: simulates the \emph{average default counting process} and returns a
matrix \code{x} with \code{dim(x) == c(n_sim, length(times))}.

\item \code{probability_distribution}: calculates the \emph{probability vector} for the \emph{average default count process}
and returns a matrix \code{x} with \code{dim(x) == c(getDimension(object)+1L, length(times))}.

\item \code{expected_value}: calculates the \emph{expected value} for the loss based on the \emph{average default
count process} for given timepoints and returns a vector \code{x} with
\code{length(x) == length(times)}.

\item \code{expected_value,CalibrationParam-method}: calculates the \emph{expected value} for the loss based on the \emph{average default
count process} for given timepoints and returns a vector \code{x} with
\code{length(x) == length(times)}.

\item \code{expected_pcds_loss}: calculates the \emph{expected value} for the \emph{portfolio CDS loss} based on the
\emph{average default count process} for given timepoints and returns a vector
\code{x} with \code{length(x) == length(times)}.

\item \code{expected_pcds_loss,CalibrationParam-method}: calculates the \emph{expected value} for the \emph{portfolio CDS loss} based on the
\emph{average default count process} for given timepoints and returns a vector
\code{x} with \code{length(x) == length(times)}.

\item \code{expected_cdo_loss}: calculates the \emph{expected value} for the \emph{CDO loss} based on the \emph{average
default count process} for given timepoints and returns a vector \code{x} with
\code{length(x) == length(times)}.

\item \code{expected_cdo_loss,CalibrationParam-method}: calculates the \emph{expected value} for the \emph{CDO loss} based on the \emph{average
default count process} for given timepoints and returns a vector \code{x} with
\code{length(x) == length(times)}.

\item \code{expected_pcds_equation}: calculates the \emph{payoff equation} for a \emph{portfolio CDS} (vectorized w.r.t.
the argumentes \code{recovery_rate}, \code{coupon}, and \code{upfront}).

\item \code{expected_pcds_equation,CalibrationParam-method}: calculates the \emph{payoff equation} for a \emph{portfolio CDS} (vectorized w.r.t.
the argumentes \code{recovery_rate}, \code{coupon}, and \code{upfront}).

\item \code{expected_cdo_equation}: calculates the \emph{payoff equation} for a \emph{CDO} (vectorized w.r.t. the
argumentes \code{recovery_rate}, \code{coupon}, and \code{upfront}).

\item \code{expected_cdo_equation,CalibrationParam-method}: calculates the \emph{payoff equation} for a \emph{CDO} (vectorized w.r.t. the
argumentes \code{recovery_rate}, \code{coupon}, and \code{upfront}).
}}

\section{Slots}{

\describe{
\item{\code{dim}}{The dimension (number of portfolio items).}
}}

\section{Probability distribution}{

The probability vector of the \emph{average default counting process} \eqn{L}
for certain times can be calculated with \code{\link[=probability_distribution]{probability_distribution()}};
i.e. the values
\deqn{
  \mathbb{P}(L_t = k/d) , \quad k \in {\{ 0, \ldots, d \}} , \quad t \geq 0 .
}
}

\section{Expected value}{

The \emph{expectated value} of the \emph{average default counting process} \eqn{L}
under a payoff-transformation can be calculated with \code{\link[=expected_value]{expected_value()}}; i.e. the
value
\deqn{
  \mathbb{E}[g(L_t)] , \quad t \geq 0.
}
For a \emph{portfolio CDS} choose \eqn{g(x) = (1 - R) x} and for a \emph{CDO} tranche with
attachment points \eqn{l < u} and choose
\eqn{g(x) = min{\{ \max{\{ (1 - R) x - l, 0 \}}, u - l \}}}, where \eqn{R} is
the recovery rate.
\itemize{
\item \code{\link[=expected_value]{expected_value()}} can be used for general payoff-transformations of the
\emph{average default counting process}.
\item \code{\link[=expected_pcds_loss]{expected_pcds_loss()}} and \code{\link[=expected_cdo_loss]{expected_cdo_loss()}} are convenience-wrappers
for \emph{portfolio CDS} and \emph{CDO} payoff-transformations.
}
}

\examples{
parm <- ExMarkovParam(rmo::exQMatrix(rmo::AlphaStableBernsteinFunction(0.4), d = 5L))
simulate_adcp(parm, 1, n_sim = 10L)
simulate_adcp(parm, seq(0, 5, by = 0.25), n_sim = 10L)

expected_value(CuadrasAugeExtMO2FParam(
  dim = 50L, lambda = 0.05, rho = 0.4), 0.3,
  function(x) pmin(pmax(0.6 * x - 0.1, 0), 0.2))
expected_value(AlphaStableExtMO2FParam(
  dim = 50L, lambda = 0.05, rho = 0.4), 0.3,
  function(x) pmin(pmax(0.6 * x - 0.1, 0), 0.2))
expected_value(PoissonExtMO2FParam(
  dim = 50L, lambda = 0.05, rho = 0.4), 0.3,
  function(x) pmin(pmax(0.6 * x - 0.1, 0), 0.2))
expected_value(ExponentialExtMO2FParam(
  dim = 50L, lambda = 0.05, rho = 0.4), 0.3,
  function(x) pmin(pmax(0.6 * x - 0.1, 0), 0.2))

expected_pcds_loss(CuadrasAugeExtMO2FParam(
  dim = 50L, lambda = 0.05, rho = 0.4), 0.3, 0.4)
expected_pcds_loss(AlphaStableExtMO2FParam(
  dim = 50L, lambda = 0.05, rho = 0.4), 0.3, 0.4)
expected_pcds_loss(PoissonExtMO2FParam(
  dim = 50L, lambda = 0.05, rho = 0.4), 0.3, 0.4)
expected_pcds_loss(ExponentialExtMO2FParam(
  dim = 50L, lambda = 0.05, rho = 0.4), 0.3, 0.4)

expected_cdo_loss(CuadrasAugeExtMO2FParam(
  dim = 50, lambda = 0.05, rho = 0.4), 0.3, 0.4, 0.1, 0.2)
expected_cdo_loss(AlphaStableExtMO2FParam(
  dim = 50, lambda = 0.05, rho = 0.4), 0.3, 0.4, 0.1, 0.2)
expected_cdo_loss(PoissonExtMO2FParam(
  dim = 50, lambda = 0.05, rho = 0.4), 0.3, 0.4, 0.1, 0.2)
expected_cdo_loss(ExponentialExtMO2FParam(
  dim = 50, lambda = 0.05, rho = 0.4), 0.3, 0.4, 0.1, 0.2)

expected_pcds_equation(
  ExtGaussian2FParam(dim = 75, lambda = 0.05, rho = 0.6),
  times = seq(0.25, 5, by = 0.25), discount_factors = rep(1, 20),
  recovery_rate = 0.4, coupon = 0.08, upfront = 0
)
expected_pcds_equation(
  ExtGaussian2FParam(dim = 75, lambda = 0.05, rho = 0.6),
  times = seq(0.25, 5, by = 0.25), discount_factors = rep(1, 20),
  recovery_rate = rep(0.4, 4), coupon = rep(0.08, 4), upfront = rep(0, 4)
)

expected_cdo_equation(
  ExtGaussian2FParam(dim = 75, lambda = 0.05, rho = 0.6),
  times = seq(0.25, 5, by = 0.25), discount_factors = rep(1, 20),
  recovery_rate = 0.4, lower = c(0, 0.1, 0.2, 0.35),
  upper = c(0.1, 0.2, 0.35, 1), coupon = 0.08, upfront = 0
)

}
\seealso{
\linkS4class{ExMarkovParam} \linkS4class{ExMOParam} \linkS4class{ExtMOParam}
\linkS4class{CuadrasAugeExtMO2FParam} \linkS4class{AlphaStableExtMO2FParam}
\linkS4class{PoissonExtMO2FParam} \linkS4class{ExponentialExtMO2FParam}
\linkS4class{ExtArch2FParam} \linkS4class{ClaytonExtArch2FParam}
\linkS4class{FrankExtArch2FParam} \linkS4class{GumbelExtArch2FParam}
\linkS4class{JoeExtArch2FParam} \code{\link[=expected_pcds_loss]{expected_pcds_loss()}}, \code{\link[=expected_cdo_loss]{expected_cdo_loss()}}
}
