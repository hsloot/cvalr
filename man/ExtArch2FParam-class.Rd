% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/allClass-S4.R, R/allInitialize-S4.R,
%   R/simulate_param-S4.R, R/expected_value-S4.R
\docType{class}
\name{ExtArch2FParam-class}
\alias{ExtArch2FParam-class}
\alias{ExtArch2FParam}
\alias{ClaytonExtArch2FParam-class}
\alias{ClaytonExtArch2FParam}
\alias{FrankExtArch2FParam-class}
\alias{FrankExtArch2FParam}
\alias{GumbelExtArch2FParam-class}
\alias{GumbelExtArch2FParam}
\alias{AmhExtArch2FParam-class}
\alias{AmhExtArch2FParam}
\alias{JoeExtArch2FParam-class}
\alias{JoeExtArch2FParam}
\alias{initialize,ExtArch2FParam-method}
\alias{initialize,ExtArch2FParam,ANY-method}
\alias{initialize,ClaytonExtArch2FParam-method}
\alias{initialize,ClaytonExtArch2FParam,ANY-method}
\alias{initialize,FrankExtArch2FParam-method}
\alias{initialize,FrankExtArch2FParam,ANY-method}
\alias{initialize,GumbelExtArch2FParam-method}
\alias{initialize,GumbelExtArch2FParam,ANY-method}
\alias{initialize,AmhExtArch2FParam-method}
\alias{initialize,AmhExtArch2FParam,ANY-method}
\alias{initialize,JoeExtArch2FParam-method}
\alias{initialize,JoeExtArch2FParam,ANY-method}
\alias{simulate_param,ExtArch2FParam-method}
\alias{expected_pcds_loss,FrankExtArch2FParam-method}
\title{Two-factor extendible Archimedean calibration parameter classes}
\usage{
\S4method{initialize}{ExtArch2FParam}(
  .Object,
  dim = 2,
  lambda = 0.1,
  nu = 1,
  rho = NULL,
  tau = NULL,
  family = c("clayton", "frank", "amh", "gumbel", "joe")
)

\S4method{initialize}{ClaytonExtArch2FParam}(.Object, ...)

\S4method{initialize}{FrankExtArch2FParam}(.Object, ...)

\S4method{initialize}{GumbelExtArch2FParam}(.Object, ...)

\S4method{initialize}{AmhExtArch2FParam}(.Object, ...)

\S4method{initialize}{JoeExtArch2FParam}(.Object, ...)

\S4method{simulate_param}{ExtArch2FParam}(
  object,
  times,
  ...,
  method = c("default", "ExtArch2fParam"),
  n_sim = 10000
)

\S4method{expected_pcds_loss}{FrankExtArch2FParam}(
  object,
  times,
  recovery_rate,
  ...,
  method = c("default", "FrankExtArch2FParam", "CalibrationParam")
)
}
\arguments{
\item{.Object}{ An object:  see the \dQuote{Initialize Methods} section.}

\item{dim}{Dimension.}

\item{lambda}{Marginal intensity.}

\item{nu}{Dependence parameter (see \link[copula:archmCopula-class]{copula::archmCopula}).}

\item{rho}{Spearman's Rho.}

\item{tau}{Kendall's Tau.}

\item{family}{Name of the Archimedean copula family
(see \link[copula:archmCopula-class]{copula::archmCopula}).}

\item{...}{Pass-through parameters.}

\item{object}{The calibration parameter object.}

\item{times}{Point-in-time.}

\item{method}{Calculation method (either \code{"default"} or the name of the
class whose implementation should be used).}

\item{n_sim}{Number of samples.}

\item{recovery_rate}{The recovery rate of the portfolio CDS/CDO.}
}
\description{
Calibration parameter classes with two parameters for the extendible
Archimedean families with exponential margins.
}
\details{
For all implemented families, the parameter \code{nu} can be replaced by
\emph{Spearman's Rho} \code{rho}, \emph{Kendall's Tau} \code{tau}.
For all implemented families, the possible range for \code{rho} and \code{tau}
is from zero to one (boundaries might not be included) and have a
one-to-one mapping to the model-specific parameter \code{nu}.
}
\section{Functions}{
\itemize{
\item \code{initialize,ExtArch2FParam-method}: Constructor

\item \code{initialize,ClaytonExtArch2FParam-method}: Constructor

\item \code{initialize,FrankExtArch2FParam-method}: Constructor

\item \code{initialize,GumbelExtArch2FParam-method}: Constructor

\item \code{initialize,AmhExtArch2FParam-method}: Constructor

\item \code{initialize,JoeExtArch2FParam-method}: Constructor

\item \code{simulate_param,ExtArch2FParam-method}: simulates the default counting process \eqn{L} and returns a matrix \code{x} with
\code{nrow(x) == n_sim} and \code{ncol(x) == length(times)} if \code{length(times) > 1L}
and a vector \code{x} with \code{length(x) == n_sim} otherwise.

\item \code{expected_pcds_loss,FrankExtArch2FParam-method}: returns the expected portfolio CDS loss for a specific time-point.
}}

\section{Slots}{

\describe{
\item{\code{lambda}}{The marginal recovery_rate}

\item{\code{nu}}{Model specific parameter}
}}

\examples{
ExtArch2FParam()
ExtArch2FParam(lambda = 8e-2, rho = 4e-1, family = "gumbel")
ExtArch2FParam(lambda = 8e-2, tau = 4e-1, family = "amh")
ClaytonExtArch2FParam()
ClaytonExtArch2FParam(lambda = 8e-2, rho = 4e-1)
ClaytonExtArch2FParam(lambda = 8e-2, tau = 4e-1)
FrankExtArch2FParam()
FrankExtArch2FParam(lambda = 8e-2, rho = 4e-1)
FrankExtArch2FParam(lambda = 8e-2, tau = 4e-1)
GumbelExtArch2FParam()
GumbelExtArch2FParam(lambda = 8e-2, rho = 4e-1)
GumbelExtArch2FParam(lambda = 8e-2, tau = 4e-1)
AmhExtArch2FParam()
AmhExtArch2FParam(lambda = 8e-2, rho = 4e-1)
AmhExtArch2FParam(lambda = 8e-2, tau = 4e-1)
JoeExtArch2FParam()
JoeExtArch2FParam(lambda = 8e-2, tau = 4e-1)
simulate_param(FrankExtArch2FParam(dim = 5), 1e1, seq(0, 5, by = 0.25), n_sim = 5e1)

expected_pcds_loss(FrankExtArch2FParam(dim = 75, lambda = 0.05, rho = 0.6),
  times = 0.25, recovery_rate = 0.4)
expected_pcds_loss(FrankExtArch2FParam(dim = 75, lambda = 0.05, rho = 0.6),
  times = 0.25, recovery_rate = 0.4, method = "CalibrationParam")

}
