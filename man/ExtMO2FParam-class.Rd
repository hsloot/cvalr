% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/s4-ExtMO2FParam.R
\docType{class}
\name{ExtMO2FParam-class}
\alias{ExtMO2FParam-class}
\alias{initialize,ExtMO2FParam-method}
\alias{initialize,ExtMO2FParam,ANY-method}
\alias{expected_pcds_loss,ExtMO2FParam-method}
\alias{CuadrasAugeExtMO2FParam-class}
\alias{CuadrasAugeExtMO2FParam}
\alias{AlphaStableExtMO2FParam-class}
\alias{AlphaStableExtMO2FParam}
\alias{PoissonExtMO2FParam-class}
\alias{PoissonExtMO2FParam}
\alias{ExponentialExtMO2FParam-class}
\alias{ExponentialExtMO2FParam}
\title{Two-factor extendible Marshall-Olkin calibration parameters}
\usage{
\S4method{initialize}{ExtMO2FParam}(.Object, dim, lambda, nu, rho, tau, alpha)

\S4method{expected_pcds_loss}{ExtMO2FParam}(
  object,
  times,
  recovery_rate,
  ...,
  method = c("default", "ExtMO2FParam", "CalibrationParam")
)
}
\arguments{
\item{.Object}{ An object:  see the \dQuote{Initialize Methods} section.}

\item{dim}{Dimension.}

\item{lambda}{Marginal intensity.}

\item{nu}{(Internal) bivariate dependence parameter.}

\item{rho}{Bivariate Spearman's Rho.}

\item{tau}{Bivariate Kendall's Tau.}

\item{alpha}{Bivariate lower tail-dependence coefficient.}

\item{object}{A \linkS4class{CalibrationParam}-object.}

\item{times}{A non-negative numeric vector of timepoints.}

\item{recovery_rate}{Non-negative number between zero and one for the recovery rate
of the portfolio CDS/CDO.}

\item{...}{arguments to specify properties of the new object, to
      be passed to \code{initialize()}.}

\item{method}{Calculation method (either \code{"default"} or the name of the
class whose implementation should be used).}
}
\description{
\linkS4class{CalibrationParam}-class with two parameters for the extendible
Marshall-Olkin model for the \emph{(average) default counting process}.
Extends \linkS4class{ExtMOParam}.
}
\details{
The model is defined by the assumption that the multivariate default times
\eqn{\tau = (\tau_1, \ldots, \tau_d)} are extendible Marshall-Olkin, see
\linkS4class{ExtMOParam} for the details. This class provides an interface for
easy-to-use, 2-factor families for this model.
For all implemented families, the marginal rate can be specified by \code{lambda}
and the dependence can be specified by the internal parameter \code{nu}.
For all implemented families, the (internal) dependence parameter \code{nu} has a
one-to-one relationship, and can be replaced by, \emph{Spearman's Rho} \code{rho},
\emph{Kendall' Tau} \code{tau} or the \emph{(lower) tail dependence coefficient} \code{alpha}.
The possible range for \code{rho}, \code{tau}, and \code{alpha} is from zero to one
(boundaries might not be included).
The link between lower tail-dependence coefficient \eqn{\alpha} and
Spearman's Rho and Kendall's Tau is
\itemize{
\item \eqn{\alpha = 4 \rho / (3 + \rho)} and \eqn{\rho = 3 \alpha / (4 - \alpha)}
\item \eqn{\alpha = 2 \tau / (1 + \tau)} and \eqn{\tau = \alpha / (2 - \alpha)}
}
}
\section{Functions}{
\itemize{
\item \code{initialize,ExtMO2FParam-method}: Constructor

\item \code{expected_pcds_loss,ExtMO2FParam-method}: calculates the \emph{expected value} for the \emph{portfolio CDS loss} based on the
\emph{average default count process} for given timepoints and returns a vector
\code{x} with \code{length(x) == length(times)}.
}}

\section{Slots}{

\describe{
\item{\code{lambda}}{A non-negative number for the marginal rate.}

\item{\code{nu}}{A numeric number for the model specific dependence parameter (range
depends on specific model, use \code{rho}, \code{tau}, or \code{alpha} to set dependence
parameter).}
}}

\section{Expected portfolio CDS loss}{

The \emph{expected portfolio CDS loss} for \emph{recovery rate} \eqn{R} is calculated
using that
\deqn{
  \mathbb{E}[g(L_t)]
    = (1 - R) \cdot F(t)
}
with \eqn{g(x) = (1 - R) \cdot x} and \eqn{F} being the Exponential
distribution function for rate \eqn{\lambda}.
}

\section{Cuadras-Augé calibration parameter class}{

Corresponds to a Lévy subordinator which is a convex combination of
a pure-killing subordinator and a pure-drift subordinator.
\itemize{
\item \eqn{\psi(x) = \nu + (1 - \nu) x}
\item \eqn{\alpha = \nu}
}
}

\section{Alpha-stable calibration parameter class}{

Corresponds to an \eqn{\alpha}-stable subordinator.
\itemize{
\item \eqn{\psi(x) = x^\nu}
\item \eqn{\nu = \log_2(2 - \alpha)} and \eqn{\alpha = 2 - 2^\nu}
}
}

\section{Poisson calibration parameter class}{

Corresponds to a Lévy subrodinator which is a convex combination of a
Poisson subordinator with jump size \code{nu} and a pure-drift subordinator.
\itemize{
\item \eqn{\psi(x) = \operatorname{e}^{-\nu}x + (1 - \operatorname{e}^{-x \nu})}
\item \eqn{\nu = -log(1 - sqrt(\alpha))} and \eqn{\alpha = (1 - \operatorname{e}^{-\nu})^2}
}
}

\section{Exponential calibration parameter class}{

Corresponds to a Lévy subordinator which is a convex combination of an
Exponential-jump compound Poisson process with rate \code{nu} and unit-intensity
and a pure-drift subordinator.
\itemize{
\item \eqn{\psi(x) = (1 - 1 / (1 + \nu))x + x   / (x + \nu)}
\item \eqn{\nu = 0.5 \cdot (-3 + \sqrt{1 + 8 / \alpha})}
and \eqn{\alpha = 2 / (1 + \nu) - 2 / (2 + \nu)}
}
}

\examples{
CuadrasAugeExtMO2FParam()
CuadrasAugeExtMO2FParam(dim = 5L, lambda = 8e-2, rho = 4e-1)
AlphaStableExtMO2FParam()
AlphaStableExtMO2FParam(dim = 5L, lambda = 8e-2, rho = 4e-1)
PoissonExtMO2FParam()
PoissonExtMO2FParam(dim = 5L, lambda = 8e-2, tau = 4e-1)
ExponentialExtMO2FParam()
ExponentialExtMO2FParam(dim = 5L, lambda = 8e-2, alpha = 4e-1)
expected_pcds_loss(CuadrasAugeExtMO2FParam(dim = 75L, lambda = 0.05, rho = 0.4),
  times = 0.25, recovery_rate = 0.4)
expected_pcds_loss(CuadrasAugeExtMO2FParam(dim = 75L, lambda = 0.05, rho = 0.4),
  times = seq(0, 5, by = 0.25), recovery_rate = 0.4)
expected_pcds_loss(CuadrasAugeExtMO2FParam(dim = 75L, lambda = 0.05, rho = 0.4),
  times = seq(0, 5, by = 0.25), recovery_rate = 0.4, method = "CalibrationParam")
expected_pcds_loss(CuadrasAugeExtMO2FParam(dim = 75L, lambda = 0.05, rho = 0.4),
  times = seq(0, 5, by = 0.25), recovery_rate = 0.4, method = "CalibrationParam",
  pd_args = list(method = "CalibrationParam", seed = 1623, sim_args = list(n_sim = 1e2L)))
expected_pcds_loss(CuadrasAugeExtMO2FParam(dim = 75L, lambda = 0.05, rho = 0.4),
  times = seq(0, 5, by = 0.25), recovery_rate = 0.4, method = "CalibrationParam",
  pd_args = list(method = "CalibrationParam", seed = 1623,
  sim_args = list(method = "ExMarkovParam", n_sim = 1e2L)))

}
