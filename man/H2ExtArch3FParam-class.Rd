% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/s4-H2ExtArch3FParam.R
\docType{class}
\name{H2ExtArch3FParam-class}
\alias{H2ExtArch3FParam-class}
\alias{H2ExtArch3FParam}
\alias{initialize,H2ExtArch3FParam-method}
\alias{initialize,H2ExtArch3FParam,ANY-method}
\alias{simulate_dt,H2ExtArch3FParam-method}
\alias{ClaytonH2ExtArch3FParam-class}
\alias{ClaytonH2ExtArch3FParam}
\alias{initialize,ClaytonH2ExtArch3FParam-method}
\alias{initialize,ClaytonH2ExtArch3FParam,ANY-method}
\alias{FrankH2ExtArch3FParam-class}
\alias{FrankH2ExtArch3FParam}
\alias{initialize,FrankH2ExtArch3FParam-method}
\alias{initialize,FrankH2ExtArch3FParam,ANY-method}
\alias{GumbelH2ExtArch3FParam-class}
\alias{GumbelH2ExtArch3FParam}
\alias{initialize,GumbelH2ExtArch3FParam-method}
\alias{initialize,GumbelH2ExtArch3FParam,ANY-method}
\alias{JoeH2ExtArch3FParam-class}
\alias{JoeH2ExtArch3FParam}
\alias{initialize,JoeH2ExtArch3FParam-method}
\alias{initialize,JoeH2ExtArch3FParam,ANY-method}
\title{Three-factor H2-extendible Archimedean calibration parameter}
\usage{
\S4method{initialize}{H2ExtArch3FParam}(
  .Object,
  composition = c(2L, 3L),
  lambda = 0.1,
  nu = c(0.2, 0.3),
  rho = NULL,
  tau = NULL,
  survival = TRUE,
  family = c("Clayton", "Frank", "Gumbel", "Joe")
)

\S4method{simulate_dt}{H2ExtArch3FParam}(object, ..., n_sim = 10000)

\S4method{initialize}{ClaytonH2ExtArch3FParam}(.Object, ..., survival = FALSE)

\S4method{initialize}{FrankH2ExtArch3FParam}(.Object, ..., survival = TRUE)

\S4method{initialize}{GumbelH2ExtArch3FParam}(.Object, ..., survival = TRUE)

\S4method{initialize}{JoeH2ExtArch3FParam}(.Object, ..., survival = TRUE)
}
\arguments{
\item{.Object}{ An object:  see the \dQuote{Initialize Methods} section.}

\item{composition}{Positive integerish vector for the component-composition.}

\item{lambda}{Marginal intensity.}

\item{nu}{Dependency parameter (see \link[copula:archmCopula-class]{copula::archmCopula} and
\link[copula:nacopula-class]{copula::nacopula}).}

\item{rho}{Spearman's Rho.}

\item{tau}{Kendall's Tau.}

\item{survival}{Flag if survival copula is specified (default, except for Clayton)}

\item{family}{Name of the Archimedean copula family
(see \link[copula:archmCopula-class]{copula::archmCopula}).}

\item{object}{A \linkS4class{CalibrationParam}-object.}

\item{...}{Pass-through parameters.}

\item{n_sim}{Number of samples.}
}
\description{
\linkS4class{CalibrationParam} for the H2-extendible Archimedean copula with Exponential margin model
for the \emph{(average) default counting process}  with 3 parameter. Extends
\linkS4class{H2ExCalibrationParam} and related to \linkS4class{ExtArch2FParam}.
}
\details{
The model is defined by the assumption that the \emph{multivariate default times} \eqn{\tau = (\tau_1,
\ldots, \tau_d)} are from a H2-extendible Archimedean copula model with Exponential margins. Per
default, the Archimedean copula is used as a survival copula, except for the Clayton-family.
The model is specified by three parameters (in addition to the composition): The \emph{marginal rate}
\code{lambda} and the (internal) \emph{outer} and \emph{inner dependency parameters} \code{nu} (see
\linkS4class{outer_nacopula}). The dependency parameter \code{nu} should not be set by the uesr; instead
they should provide either \code{rho} (\emph{Spearman's Rho}) or \code{tau} (\emph{Kendall's Tau}).
The parameters \code{rho} or \code{tau} should be between zero and one, of length 2, and non-decreasing;
the first value represents the \emph{outer dependence} between components of different partition
elements and the second value represents the \emph{inner dependence} between components of the same
partition element.

For details on the underlying extendible model, see \linkS4class{ExtArch2FParam}.
}
\section{Functions}{
\itemize{
\item \code{initialize,H2ExtArch3FParam-method}: Constructor

\item \code{simulate_dt,H2ExtArch3FParam-method}: simulates the vector of \emph{default times} and returns a matrix \code{x} with
\code{dim(x) == c(n_sim, getDimension(object))}.

\item \code{initialize,ClaytonH2ExtArch3FParam-method}: Constructor

\item \code{initialize,FrankH2ExtArch3FParam-method}: Constructor

\item \code{initialize,GumbelH2ExtArch3FParam-method}: Constructor

\item \code{initialize,JoeH2ExtArch3FParam-method}: Constructor
}}

\section{Slots}{

\describe{
\item{\code{lambda}}{A non-negative number for the marginal rate.}

\item{\code{nu}}{A numeric vector of length 2 for the model specific dependence parameters (global and
component specific; range depends on specific model). Use \code{rho} or \code{tau} in the constructor to
set dependence parameter.}
}}

\section{Simulation}{

The default times are sampled in a two-stage procedure: First a sample is drawn from the
\link[copula:nacopula-class]{copula::outer_nacopula} copula whose dependence reflect the inner- and outer-dependency
parameters; then the results are transformed using \code{\link[stats:Exponential]{stats::qexp()}}.
}

\examples{
H2ExtArch3FParam(
  composition = c(3L, 3L, 4L, 5L), lambda = 8e-2, tau = c(3e-1, 5e-1), survival = TRUE)

parm <- FrankH2ExtArch3FParam(composition = c(2L, 4L, 2L), lambda = 8e-2, rho = c(2e-1, 7e-1))
simulate_dt(parm, n_sim = 5L)

ClaytonH2ExtArch3FParam(composition = c(3L, 3L, 4L, 5L), lambda = 8e-2, tau = c(3e-1, 5e-1))
ClaytonH2ExtArch3FParam(composition = c(3L, 3L, 4L, 5L), lambda = 8e-2, rho = c(3e-1, 5e-1))
FrankH2ExtArch3FParam(composition = c(3L, 3L, 4L, 5L), lambda = 8e-2, tau = c(3e-1, 5e-1))
FrankH2ExtArch3FParam(composition = c(3L, 3L, 4L, 5L), lambda = 8e-2, rho = c(3e-1, 5e-1))
GumbelH2ExtArch3FParam(composition = c(3L, 3L, 4L, 5L), lambda = 8e-2, tau = c(3e-1, 5e-1))
GumbelH2ExtArch3FParam(composition = c(3L, 3L, 4L, 5L), lambda = 8e-2, rho = c(3e-1, 5e-1))
JoeH2ExtArch3FParam(composition = c(3L, 3L, 4L, 5L), lambda = 8e-2, tau = c(3e-1, 5e-1))
}
