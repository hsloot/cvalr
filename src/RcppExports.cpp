// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// multiply_binomial_coefficient
double multiply_binomial_coefficient(const double x, const std::size_t n, const std::size_t k);
RcppExport SEXP _cvalr_multiply_binomial_coefficient(SEXP xSEXP, SEXP nSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(multiply_binomial_coefficient(x, n, k));
    return rcpp_result_gen;
END_RCPP
}
// v_multiply_binomial_coefficient
NumericVector v_multiply_binomial_coefficient(const NumericVector& x, const std::size_t n, const std::size_t k);
RcppExport SEXP _cvalr_v_multiply_binomial_coefficient(SEXP xSEXP, SEXP nSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(v_multiply_binomial_coefficient(x, n, k));
    return rcpp_result_gen;
END_RCPP
}
// is_exqmatrix
bool is_exqmatrix(const NumericMatrix& x, const double tol);
RcppExport SEXP _cvalr_is_exqmatrix(SEXP xSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(is_exqmatrix(x, tol));
    return rcpp_result_gen;
END_RCPP
}
// Rcpp__dt2adcp
NumericMatrix Rcpp__dt2adcp(const NumericMatrix& x, const NumericVector& times);
RcppExport SEXP _cvalr_Rcpp__dt2adcp(SEXP xSEXP, SEXP timesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type times(timesSEXP);
    rcpp_result_gen = Rcpp::wrap(Rcpp__dt2adcp(x, times));
    return rcpp_result_gen;
END_RCPP
}
// Rcpp__adcp2peqpv_pcds
NumericMatrix Rcpp__adcp2peqpv_pcds(const NumericMatrix& x, const NumericVector& times, const NumericVector& discount_factors, const NumericVector& recovery_rate, const NumericVector& coupon, const NumericVector& upfront);
RcppExport SEXP _cvalr_Rcpp__adcp2peqpv_pcds(SEXP xSEXP, SEXP timesSEXP, SEXP discount_factorsSEXP, SEXP recovery_rateSEXP, SEXP couponSEXP, SEXP upfrontSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type times(timesSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type discount_factors(discount_factorsSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type recovery_rate(recovery_rateSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type coupon(couponSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type upfront(upfrontSEXP);
    rcpp_result_gen = Rcpp::wrap(Rcpp__adcp2peqpv_pcds(x, times, discount_factors, recovery_rate, coupon, upfront));
    return rcpp_result_gen;
END_RCPP
}
// Rcpp__adcp2peqpv_cdo
NumericMatrix Rcpp__adcp2peqpv_cdo(const NumericMatrix& x, const NumericVector& times, const NumericVector& discount_factors, const NumericVector& recovery_rate, const NumericVector& lower, const NumericVector& upper, const NumericVector& coupon, const NumericVector& upfront);
RcppExport SEXP _cvalr_Rcpp__adcp2peqpv_cdo(SEXP xSEXP, SEXP timesSEXP, SEXP discount_factorsSEXP, SEXP recovery_rateSEXP, SEXP lowerSEXP, SEXP upperSEXP, SEXP couponSEXP, SEXP upfrontSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type times(timesSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type discount_factors(discount_factorsSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type recovery_rate(recovery_rateSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type upper(upperSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type coupon(couponSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type upfront(upfrontSEXP);
    rcpp_result_gen = Rcpp::wrap(Rcpp__adcp2peqpv_cdo(x, times, discount_factors, recovery_rate, lower, upper, coupon, upfront));
    return rcpp_result_gen;
END_RCPP
}
// Rcpp__trans_v_pcds
NumericMatrix Rcpp__trans_v_pcds(const NumericVector& x, const NumericVector& recovery_rate);
RcppExport SEXP _cvalr_Rcpp__trans_v_pcds(SEXP xSEXP, SEXP recovery_rateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type recovery_rate(recovery_rateSEXP);
    rcpp_result_gen = Rcpp::wrap(Rcpp__trans_v_pcds(x, recovery_rate));
    return rcpp_result_gen;
END_RCPP
}
// Rcpp__trans_v_cdo
NumericMatrix Rcpp__trans_v_cdo(const NumericVector& x, const NumericVector& recovery_rate, const NumericVector& lower, const NumericVector& upper);
RcppExport SEXP _cvalr_Rcpp__trans_v_cdo(SEXP xSEXP, SEXP recovery_rateSEXP, SEXP lowerSEXP, SEXP upperSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type recovery_rate(recovery_rateSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type upper(upperSEXP);
    rcpp_result_gen = Rcpp::wrap(Rcpp__trans_v_cdo(x, recovery_rate, lower, upper));
    return rcpp_result_gen;
END_RCPP
}
// Rcpp__lagg_ev_pcds
NumericVector Rcpp__lagg_ev_pcds(const NumericMatrix& x, const NumericVector& times, const NumericVector& discount_factors, const NumericVector& recovery_rate, const NumericVector& coupon, const NumericVector& upfront);
RcppExport SEXP _cvalr_Rcpp__lagg_ev_pcds(SEXP xSEXP, SEXP timesSEXP, SEXP discount_factorsSEXP, SEXP recovery_rateSEXP, SEXP couponSEXP, SEXP upfrontSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type times(timesSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type discount_factors(discount_factorsSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type recovery_rate(recovery_rateSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type coupon(couponSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type upfront(upfrontSEXP);
    rcpp_result_gen = Rcpp::wrap(Rcpp__lagg_ev_pcds(x, times, discount_factors, recovery_rate, coupon, upfront));
    return rcpp_result_gen;
END_RCPP
}
// Rcpp__lagg_ev_cdo
NumericVector Rcpp__lagg_ev_cdo(const NumericMatrix& x, const NumericVector& times, const NumericVector& discount_factors, const NumericVector& recovery_rate, const NumericVector& lower, const NumericVector& upper, const NumericVector& coupon, const NumericVector& upfront);
RcppExport SEXP _cvalr_Rcpp__lagg_ev_cdo(SEXP xSEXP, SEXP timesSEXP, SEXP discount_factorsSEXP, SEXP recovery_rateSEXP, SEXP lowerSEXP, SEXP upperSEXP, SEXP couponSEXP, SEXP upfrontSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type times(timesSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type discount_factors(discount_factorsSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type recovery_rate(recovery_rateSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type upper(upperSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type coupon(couponSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type upfront(upfrontSEXP);
    rcpp_result_gen = Rcpp::wrap(Rcpp__lagg_ev_cdo(x, times, discount_factors, recovery_rate, lower, upper, coupon, upfront));
    return rcpp_result_gen;
END_RCPP
}
// Rcpp__adcp2epd
NumericMatrix Rcpp__adcp2epd(const NumericMatrix& x, const std::size_t d);
RcppExport SEXP _cvalr_Rcpp__adcp2epd(SEXP xSEXP, SEXP dSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type d(dSEXP);
    rcpp_result_gen = Rcpp::wrap(Rcpp__adcp2epd(x, d));
    return rcpp_result_gen;
END_RCPP
}
// Rcpp__pcds_ddl
double Rcpp__pcds_ddl(const NumericVector& l, const NumericVector& df, const double recovery_rate);
RcppExport SEXP _cvalr_Rcpp__pcds_ddl(SEXP lSEXP, SEXP dfSEXP, SEXP recovery_rateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type l(lSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type df(dfSEXP);
    Rcpp::traits::input_parameter< const double >::type recovery_rate(recovery_rateSEXP);
    rcpp_result_gen = Rcpp::wrap(Rcpp__pcds_ddl(l, df, recovery_rate));
    return rcpp_result_gen;
END_RCPP
}
// Rcpp__cdo_ddl
double Rcpp__cdo_ddl(const NumericVector& l, const NumericVector& df, const double recovery_rate, const double lower, const double upper);
RcppExport SEXP _cvalr_Rcpp__cdo_ddl(SEXP lSEXP, SEXP dfSEXP, SEXP recovery_rateSEXP, SEXP lowerSEXP, SEXP upperSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type l(lSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type df(dfSEXP);
    Rcpp::traits::input_parameter< const double >::type recovery_rate(recovery_rateSEXP);
    Rcpp::traits::input_parameter< const double >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< const double >::type upper(upperSEXP);
    rcpp_result_gen = Rcpp::wrap(Rcpp__cdo_ddl(l, df, recovery_rate, lower, upper));
    return rcpp_result_gen;
END_RCPP
}
// Rcpp__eddl
double Rcpp__eddl(const NumericVector& l, const NumericVector& df);
RcppExport SEXP _cvalr_Rcpp__eddl(SEXP lSEXP, SEXP dfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type l(lSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type df(dfSEXP);
    rcpp_result_gen = Rcpp::wrap(Rcpp__eddl(l, df));
    return rcpp_result_gen;
END_RCPP
}
// Rcpp__pcds_dpl
double Rcpp__pcds_dpl(const NumericVector& l, const NumericVector& t, const NumericVector& df, const double recovery_rate, const double coupon, const double upfront);
RcppExport SEXP _cvalr_Rcpp__pcds_dpl(SEXP lSEXP, SEXP tSEXP, SEXP dfSEXP, SEXP recovery_rateSEXP, SEXP couponSEXP, SEXP upfrontSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type l(lSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type t(tSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type df(dfSEXP);
    Rcpp::traits::input_parameter< const double >::type recovery_rate(recovery_rateSEXP);
    Rcpp::traits::input_parameter< const double >::type coupon(couponSEXP);
    Rcpp::traits::input_parameter< const double >::type upfront(upfrontSEXP);
    rcpp_result_gen = Rcpp::wrap(Rcpp__pcds_dpl(l, t, df, recovery_rate, coupon, upfront));
    return rcpp_result_gen;
END_RCPP
}
// Rcpp__cdo_dpl
double Rcpp__cdo_dpl(const NumericVector& l, const NumericVector& t, const NumericVector& df, const double recovery_rate, const double lower, const double upper, const double coupon, const double upfront);
RcppExport SEXP _cvalr_Rcpp__cdo_dpl(SEXP lSEXP, SEXP tSEXP, SEXP dfSEXP, SEXP recovery_rateSEXP, SEXP lowerSEXP, SEXP upperSEXP, SEXP couponSEXP, SEXP upfrontSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type l(lSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type t(tSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type df(dfSEXP);
    Rcpp::traits::input_parameter< const double >::type recovery_rate(recovery_rateSEXP);
    Rcpp::traits::input_parameter< const double >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< const double >::type upper(upperSEXP);
    Rcpp::traits::input_parameter< const double >::type coupon(couponSEXP);
    Rcpp::traits::input_parameter< const double >::type upfront(upfrontSEXP);
    rcpp_result_gen = Rcpp::wrap(Rcpp__cdo_dpl(l, t, df, recovery_rate, lower, upper, coupon, upfront));
    return rcpp_result_gen;
END_RCPP
}
// Rcpp__pcds_edpl
double Rcpp__pcds_edpl(const NumericVector& l, const NumericVector& t, const NumericVector& df, const double recovery_rate, const double coupon, const double upfront);
RcppExport SEXP _cvalr_Rcpp__pcds_edpl(SEXP lSEXP, SEXP tSEXP, SEXP dfSEXP, SEXP recovery_rateSEXP, SEXP couponSEXP, SEXP upfrontSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type l(lSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type t(tSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type df(dfSEXP);
    Rcpp::traits::input_parameter< const double >::type recovery_rate(recovery_rateSEXP);
    Rcpp::traits::input_parameter< const double >::type coupon(couponSEXP);
    Rcpp::traits::input_parameter< const double >::type upfront(upfrontSEXP);
    rcpp_result_gen = Rcpp::wrap(Rcpp__pcds_edpl(l, t, df, recovery_rate, coupon, upfront));
    return rcpp_result_gen;
END_RCPP
}
// Rcpp__cdo_edpl
double Rcpp__cdo_edpl(const NumericVector& l, const NumericVector& t, const NumericVector& df, const double recovery_rate, const double lower, const double upper, const double coupon, const double upfront);
RcppExport SEXP _cvalr_Rcpp__cdo_edpl(SEXP lSEXP, SEXP tSEXP, SEXP dfSEXP, SEXP recovery_rateSEXP, SEXP lowerSEXP, SEXP upperSEXP, SEXP couponSEXP, SEXP upfrontSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type l(lSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type t(tSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type df(dfSEXP);
    Rcpp::traits::input_parameter< const double >::type recovery_rate(recovery_rateSEXP);
    Rcpp::traits::input_parameter< const double >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< const double >::type upper(upperSEXP);
    Rcpp::traits::input_parameter< const double >::type coupon(couponSEXP);
    Rcpp::traits::input_parameter< const double >::type upfront(upfrontSEXP);
    rcpp_result_gen = Rcpp::wrap(Rcpp__cdo_edpl(l, t, df, recovery_rate, lower, upper, coupon, upfront));
    return rcpp_result_gen;
END_RCPP
}
// Rcpp__pcds_dtl
double Rcpp__pcds_dtl(const NumericVector& l, const NumericVector& t, const NumericVector& df, const double recovery_rate, const double coupon, const double upfront);
RcppExport SEXP _cvalr_Rcpp__pcds_dtl(SEXP lSEXP, SEXP tSEXP, SEXP dfSEXP, SEXP recovery_rateSEXP, SEXP couponSEXP, SEXP upfrontSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type l(lSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type t(tSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type df(dfSEXP);
    Rcpp::traits::input_parameter< const double >::type recovery_rate(recovery_rateSEXP);
    Rcpp::traits::input_parameter< const double >::type coupon(couponSEXP);
    Rcpp::traits::input_parameter< const double >::type upfront(upfrontSEXP);
    rcpp_result_gen = Rcpp::wrap(Rcpp__pcds_dtl(l, t, df, recovery_rate, coupon, upfront));
    return rcpp_result_gen;
END_RCPP
}
// Rcpp__cdo_dtl
double Rcpp__cdo_dtl(const NumericVector& l, const NumericVector& t, const NumericVector& df, const double recovery_rate, const double lower, const double upper, const double coupon, const double upfront);
RcppExport SEXP _cvalr_Rcpp__cdo_dtl(SEXP lSEXP, SEXP tSEXP, SEXP dfSEXP, SEXP recovery_rateSEXP, SEXP lowerSEXP, SEXP upperSEXP, SEXP couponSEXP, SEXP upfrontSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type l(lSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type t(tSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type df(dfSEXP);
    Rcpp::traits::input_parameter< const double >::type recovery_rate(recovery_rateSEXP);
    Rcpp::traits::input_parameter< const double >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< const double >::type upper(upperSEXP);
    Rcpp::traits::input_parameter< const double >::type coupon(couponSEXP);
    Rcpp::traits::input_parameter< const double >::type upfront(upfrontSEXP);
    rcpp_result_gen = Rcpp::wrap(Rcpp__cdo_dtl(l, t, df, recovery_rate, lower, upper, coupon, upfront));
    return rcpp_result_gen;
END_RCPP
}
// Rcpp__pcds_edtl
double Rcpp__pcds_edtl(const NumericVector& l, const NumericVector& t, const NumericVector& df, const double recovery_rate, const double coupon, const double upfront);
RcppExport SEXP _cvalr_Rcpp__pcds_edtl(SEXP lSEXP, SEXP tSEXP, SEXP dfSEXP, SEXP recovery_rateSEXP, SEXP couponSEXP, SEXP upfrontSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type l(lSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type t(tSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type df(dfSEXP);
    Rcpp::traits::input_parameter< const double >::type recovery_rate(recovery_rateSEXP);
    Rcpp::traits::input_parameter< const double >::type coupon(couponSEXP);
    Rcpp::traits::input_parameter< const double >::type upfront(upfrontSEXP);
    rcpp_result_gen = Rcpp::wrap(Rcpp__pcds_edtl(l, t, df, recovery_rate, coupon, upfront));
    return rcpp_result_gen;
END_RCPP
}
// Rcpp__cdo_edtl
double Rcpp__cdo_edtl(const NumericVector& l, const NumericVector& t, const NumericVector& df, const double recovery_rate, const double lower, const double upper, const double coupon, const double upfront);
RcppExport SEXP _cvalr_Rcpp__cdo_edtl(SEXP lSEXP, SEXP tSEXP, SEXP dfSEXP, SEXP recovery_rateSEXP, SEXP lowerSEXP, SEXP upperSEXP, SEXP couponSEXP, SEXP upfrontSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type l(lSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type t(tSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type df(dfSEXP);
    Rcpp::traits::input_parameter< const double >::type recovery_rate(recovery_rateSEXP);
    Rcpp::traits::input_parameter< const double >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< const double >::type upper(upperSEXP);
    Rcpp::traits::input_parameter< const double >::type coupon(couponSEXP);
    Rcpp::traits::input_parameter< const double >::type upfront(upfrontSEXP);
    rcpp_result_gen = Rcpp::wrap(Rcpp__cdo_edtl(l, t, df, recovery_rate, lower, upper, coupon, upfront));
    return rcpp_result_gen;
END_RCPP
}
// Rcpp__rexmo_markovian_acdp
NumericMatrix Rcpp__rexmo_markovian_acdp(const std::size_t n, const NumericVector& times, const std::size_t d, const NumericVector& ex_intensities);
RcppExport SEXP _cvalr_Rcpp__rexmo_markovian_acdp(SEXP nSEXP, SEXP timesSEXP, SEXP dSEXP, SEXP ex_intensitiesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::size_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type times(timesSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type d(dSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type ex_intensities(ex_intensitiesSEXP);
    rcpp_result_gen = Rcpp::wrap(Rcpp__rexmo_markovian_acdp(n, times, d, ex_intensities));
    return rcpp_result_gen;
END_RCPP
}
// Rcpp__rcamo_esm_adcp
NumericMatrix Rcpp__rcamo_esm_adcp(const std::size_t n, const NumericVector& times, const std::size_t d, const double alpha, const double beta);
RcppExport SEXP _cvalr_Rcpp__rcamo_esm_adcp(SEXP nSEXP, SEXP timesSEXP, SEXP dSEXP, SEXP alphaSEXP, SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::size_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type times(timesSEXP);
    Rcpp::traits::input_parameter< const std::size_t >::type d(dSEXP);
    Rcpp::traits::input_parameter< const double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const double >::type beta(betaSEXP);
    rcpp_result_gen = Rcpp::wrap(Rcpp__rcamo_esm_adcp(n, times, d, alpha, beta));
    return rcpp_result_gen;
END_RCPP
}
// Rcpp__rh2exmo_markovian_dt
NumericMatrix Rcpp__rh2exmo_markovian_dt(const std::size_t n, const double fraction, const List& models);
RcppExport SEXP _cvalr_Rcpp__rh2exmo_markovian_dt(SEXP nSEXP, SEXP fractionSEXP, SEXP modelsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::size_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< const double >::type fraction(fractionSEXP);
    Rcpp::traits::input_parameter< const List& >::type models(modelsSEXP);
    rcpp_result_gen = Rcpp::wrap(Rcpp__rh2exmo_markovian_dt(n, fraction, models));
    return rcpp_result_gen;
END_RCPP
}
// Rcpp__rh2excamo_esm_dt
NumericMatrix Rcpp__rh2excamo_esm_dt(const std::size_t n, const double fraction, const List& models);
RcppExport SEXP _cvalr_Rcpp__rh2excamo_esm_dt(SEXP nSEXP, SEXP fractionSEXP, SEXP modelsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::size_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< const double >::type fraction(fractionSEXP);
    Rcpp::traits::input_parameter< const List& >::type models(modelsSEXP);
    rcpp_result_gen = Rcpp::wrap(Rcpp__rh2excamo_esm_dt(n, fraction, models));
    return rcpp_result_gen;
END_RCPP
}
// Rcpp__rh2exmo_markovian_adcp
NumericMatrix Rcpp__rh2exmo_markovian_adcp(const std::size_t n, const NumericVector& times, const double fraction, const List& models);
RcppExport SEXP _cvalr_Rcpp__rh2exmo_markovian_adcp(SEXP nSEXP, SEXP timesSEXP, SEXP fractionSEXP, SEXP modelsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::size_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type times(timesSEXP);
    Rcpp::traits::input_parameter< const double >::type fraction(fractionSEXP);
    Rcpp::traits::input_parameter< const List& >::type models(modelsSEXP);
    rcpp_result_gen = Rcpp::wrap(Rcpp__rh2exmo_markovian_adcp(n, times, fraction, models));
    return rcpp_result_gen;
END_RCPP
}
// Rcpp__rh2excamo_esm_adcp
NumericMatrix Rcpp__rh2excamo_esm_adcp(const std::size_t n, const NumericVector& times, const double fraction, const List& models);
RcppExport SEXP _cvalr_Rcpp__rh2excamo_esm_adcp(SEXP nSEXP, SEXP timesSEXP, SEXP fractionSEXP, SEXP modelsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::size_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type times(timesSEXP);
    Rcpp::traits::input_parameter< const double >::type fraction(fractionSEXP);
    Rcpp::traits::input_parameter< const List& >::type models(modelsSEXP);
    rcpp_result_gen = Rcpp::wrap(Rcpp__rh2excamo_esm_adcp(n, times, fraction, models));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_cvalr_multiply_binomial_coefficient", (DL_FUNC) &_cvalr_multiply_binomial_coefficient, 3},
    {"_cvalr_v_multiply_binomial_coefficient", (DL_FUNC) &_cvalr_v_multiply_binomial_coefficient, 3},
    {"_cvalr_is_exqmatrix", (DL_FUNC) &_cvalr_is_exqmatrix, 2},
    {"_cvalr_Rcpp__dt2adcp", (DL_FUNC) &_cvalr_Rcpp__dt2adcp, 2},
    {"_cvalr_Rcpp__adcp2peqpv_pcds", (DL_FUNC) &_cvalr_Rcpp__adcp2peqpv_pcds, 6},
    {"_cvalr_Rcpp__adcp2peqpv_cdo", (DL_FUNC) &_cvalr_Rcpp__adcp2peqpv_cdo, 8},
    {"_cvalr_Rcpp__trans_v_pcds", (DL_FUNC) &_cvalr_Rcpp__trans_v_pcds, 2},
    {"_cvalr_Rcpp__trans_v_cdo", (DL_FUNC) &_cvalr_Rcpp__trans_v_cdo, 4},
    {"_cvalr_Rcpp__lagg_ev_pcds", (DL_FUNC) &_cvalr_Rcpp__lagg_ev_pcds, 6},
    {"_cvalr_Rcpp__lagg_ev_cdo", (DL_FUNC) &_cvalr_Rcpp__lagg_ev_cdo, 8},
    {"_cvalr_Rcpp__adcp2epd", (DL_FUNC) &_cvalr_Rcpp__adcp2epd, 2},
    {"_cvalr_Rcpp__pcds_ddl", (DL_FUNC) &_cvalr_Rcpp__pcds_ddl, 3},
    {"_cvalr_Rcpp__cdo_ddl", (DL_FUNC) &_cvalr_Rcpp__cdo_ddl, 5},
    {"_cvalr_Rcpp__eddl", (DL_FUNC) &_cvalr_Rcpp__eddl, 2},
    {"_cvalr_Rcpp__pcds_dpl", (DL_FUNC) &_cvalr_Rcpp__pcds_dpl, 6},
    {"_cvalr_Rcpp__cdo_dpl", (DL_FUNC) &_cvalr_Rcpp__cdo_dpl, 8},
    {"_cvalr_Rcpp__pcds_edpl", (DL_FUNC) &_cvalr_Rcpp__pcds_edpl, 6},
    {"_cvalr_Rcpp__cdo_edpl", (DL_FUNC) &_cvalr_Rcpp__cdo_edpl, 8},
    {"_cvalr_Rcpp__pcds_dtl", (DL_FUNC) &_cvalr_Rcpp__pcds_dtl, 6},
    {"_cvalr_Rcpp__cdo_dtl", (DL_FUNC) &_cvalr_Rcpp__cdo_dtl, 8},
    {"_cvalr_Rcpp__pcds_edtl", (DL_FUNC) &_cvalr_Rcpp__pcds_edtl, 6},
    {"_cvalr_Rcpp__cdo_edtl", (DL_FUNC) &_cvalr_Rcpp__cdo_edtl, 8},
    {"_cvalr_Rcpp__rexmo_markovian_acdp", (DL_FUNC) &_cvalr_Rcpp__rexmo_markovian_acdp, 4},
    {"_cvalr_Rcpp__rcamo_esm_adcp", (DL_FUNC) &_cvalr_Rcpp__rcamo_esm_adcp, 5},
    {"_cvalr_Rcpp__rh2exmo_markovian_dt", (DL_FUNC) &_cvalr_Rcpp__rh2exmo_markovian_dt, 3},
    {"_cvalr_Rcpp__rh2excamo_esm_dt", (DL_FUNC) &_cvalr_Rcpp__rh2excamo_esm_dt, 3},
    {"_cvalr_Rcpp__rh2exmo_markovian_adcp", (DL_FUNC) &_cvalr_Rcpp__rh2exmo_markovian_adcp, 4},
    {"_cvalr_Rcpp__rh2excamo_esm_adcp", (DL_FUNC) &_cvalr_Rcpp__rh2excamo_esm_adcp, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_cvalr(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
