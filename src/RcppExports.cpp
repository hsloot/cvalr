// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// portfolio_cds_coupon
double portfolio_cds_coupon(const NumericVector& expected_losses, const NumericVector& times, const NumericVector& discount_factors, const double recovery_rate);
RcppExport SEXP _cvalr_portfolio_cds_coupon(SEXP expected_lossesSEXP, SEXP timesSEXP, SEXP discount_factorsSEXP, SEXP recovery_rateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type expected_losses(expected_lossesSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type times(timesSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type discount_factors(discount_factorsSEXP);
    Rcpp::traits::input_parameter< const double >::type recovery_rate(recovery_rateSEXP);
    rcpp_result_gen = Rcpp::wrap(portfolio_cds_coupon(expected_losses, times, discount_factors, recovery_rate));
    return rcpp_result_gen;
END_RCPP
}
// portfolio_cds_upfront
double portfolio_cds_upfront(const NumericVector& expected_losses, const NumericVector& times, const NumericVector& discount_factors, const double recovery_rate, const double coupon);
RcppExport SEXP _cvalr_portfolio_cds_upfront(SEXP expected_lossesSEXP, SEXP timesSEXP, SEXP discount_factorsSEXP, SEXP recovery_rateSEXP, SEXP couponSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type expected_losses(expected_lossesSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type times(timesSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type discount_factors(discount_factorsSEXP);
    Rcpp::traits::input_parameter< const double >::type recovery_rate(recovery_rateSEXP);
    Rcpp::traits::input_parameter< const double >::type coupon(couponSEXP);
    rcpp_result_gen = Rcpp::wrap(portfolio_cds_upfront(expected_losses, times, discount_factors, recovery_rate, coupon));
    return rcpp_result_gen;
END_RCPP
}
// portfolio_cds_equation
double portfolio_cds_equation(const NumericVector& expected_losses, const NumericVector& times, const NumericVector& discount_factors, const double recovery_rate, const double coupon, const double upfront);
RcppExport SEXP _cvalr_portfolio_cds_equation(SEXP expected_lossesSEXP, SEXP timesSEXP, SEXP discount_factorsSEXP, SEXP recovery_rateSEXP, SEXP couponSEXP, SEXP upfrontSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type expected_losses(expected_lossesSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type times(timesSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type discount_factors(discount_factorsSEXP);
    Rcpp::traits::input_parameter< const double >::type recovery_rate(recovery_rateSEXP);
    Rcpp::traits::input_parameter< const double >::type coupon(couponSEXP);
    Rcpp::traits::input_parameter< const double >::type upfront(upfrontSEXP);
    rcpp_result_gen = Rcpp::wrap(portfolio_cds_equation(expected_losses, times, discount_factors, recovery_rate, coupon, upfront));
    return rcpp_result_gen;
END_RCPP
}
// cdo_upfront
double cdo_upfront(const NumericVector& expected_losses, const NumericVector& times, const NumericVector& discount_factors, const double lower, const double upper, const double coupon);
RcppExport SEXP _cvalr_cdo_upfront(SEXP expected_lossesSEXP, SEXP timesSEXP, SEXP discount_factorsSEXP, SEXP lowerSEXP, SEXP upperSEXP, SEXP couponSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type expected_losses(expected_lossesSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type times(timesSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type discount_factors(discount_factorsSEXP);
    Rcpp::traits::input_parameter< const double >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< const double >::type upper(upperSEXP);
    Rcpp::traits::input_parameter< const double >::type coupon(couponSEXP);
    rcpp_result_gen = Rcpp::wrap(cdo_upfront(expected_losses, times, discount_factors, lower, upper, coupon));
    return rcpp_result_gen;
END_RCPP
}
// cdo_coupon
double cdo_coupon(const NumericVector& expected_losses, const NumericVector& times, const NumericVector& discount_factors, const double lower, const double upper);
RcppExport SEXP _cvalr_cdo_coupon(SEXP expected_lossesSEXP, SEXP timesSEXP, SEXP discount_factorsSEXP, SEXP lowerSEXP, SEXP upperSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type expected_losses(expected_lossesSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type times(timesSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type discount_factors(discount_factorsSEXP);
    Rcpp::traits::input_parameter< const double >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< const double >::type upper(upperSEXP);
    rcpp_result_gen = Rcpp::wrap(cdo_coupon(expected_losses, times, discount_factors, lower, upper));
    return rcpp_result_gen;
END_RCPP
}
// cdo_equation
double cdo_equation(const NumericVector& expected_losses, const NumericVector& times, const NumericVector& discount_factors, const double lower, const double upper, const double coupon, const double upfront);
RcppExport SEXP _cvalr_cdo_equation(SEXP expected_lossesSEXP, SEXP timesSEXP, SEXP discount_factorsSEXP, SEXP lowerSEXP, SEXP upperSEXP, SEXP couponSEXP, SEXP upfrontSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type expected_losses(expected_lossesSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type times(timesSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type discount_factors(discount_factorsSEXP);
    Rcpp::traits::input_parameter< const double >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< const double >::type upper(upperSEXP);
    Rcpp::traits::input_parameter< const double >::type coupon(couponSEXP);
    Rcpp::traits::input_parameter< const double >::type upfront(upfrontSEXP);
    rcpp_result_gen = Rcpp::wrap(cdo_equation(expected_losses, times, discount_factors, lower, upper, coupon, upfront));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_cvalr_portfolio_cds_coupon", (DL_FUNC) &_cvalr_portfolio_cds_coupon, 4},
    {"_cvalr_portfolio_cds_upfront", (DL_FUNC) &_cvalr_portfolio_cds_upfront, 5},
    {"_cvalr_portfolio_cds_equation", (DL_FUNC) &_cvalr_portfolio_cds_equation, 6},
    {"_cvalr_cdo_upfront", (DL_FUNC) &_cvalr_cdo_upfront, 6},
    {"_cvalr_cdo_coupon", (DL_FUNC) &_cvalr_cdo_coupon, 5},
    {"_cvalr_cdo_equation", (DL_FUNC) &_cvalr_cdo_equation, 7},
    {NULL, NULL, 0}
};

RcppExport void R_init_cvalr(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
