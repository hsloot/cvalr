// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// portfolio_cds_spread
double portfolio_cds_spread(const NumericVector& expected_default_counts, const NumericVector& times, const NumericVector& discount_factors, const double recovery_rate);
RcppExport SEXP _cvalr_portfolio_cds_spread(SEXP expected_default_countsSEXP, SEXP timesSEXP, SEXP discount_factorsSEXP, SEXP recovery_rateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type expected_default_counts(expected_default_countsSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type times(timesSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type discount_factors(discount_factorsSEXP);
    Rcpp::traits::input_parameter< const double >::type recovery_rate(recovery_rateSEXP);
    rcpp_result_gen = Rcpp::wrap(portfolio_cds_spread(expected_default_counts, times, discount_factors, recovery_rate));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_cvalr_portfolio_cds_spread", (DL_FUNC) &_cvalr_portfolio_cds_spread, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_cvalr(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
